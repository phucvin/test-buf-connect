// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: anyservice/anyservice.proto

package anyserviceconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	anypb "google.golang.org/protobuf/types/known/anypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ServiceName is the fully-qualified name of the Service service.
	ServiceName = "anyservice.Service"
)

// ServiceClient is a client for the anyservice.Service service.
type ServiceClient interface {
	Call(context.Context, *connect_go.Request[anypb.Any]) (*connect_go.Response[anypb.Any], error)
}

// NewServiceClient constructs a client for the anyservice.Service service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serviceClient{
		call: connect_go.NewClient[anypb.Any, anypb.Any](
			httpClient,
			baseURL+"/anyservice.Service/Call",
			opts...,
		),
	}
}

// serviceClient implements ServiceClient.
type serviceClient struct {
	call *connect_go.Client[anypb.Any, anypb.Any]
}

// Call calls anyservice.Service.Call.
func (c *serviceClient) Call(ctx context.Context, req *connect_go.Request[anypb.Any]) (*connect_go.Response[anypb.Any], error) {
	return c.call.CallUnary(ctx, req)
}

// ServiceHandler is an implementation of the anyservice.Service service.
type ServiceHandler interface {
	Call(context.Context, *connect_go.Request[anypb.Any]) (*connect_go.Response[anypb.Any], error)
}

// NewServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceHandler(svc ServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/anyservice.Service/Call", connect_go.NewUnaryHandler(
		"/anyservice.Service/Call",
		svc.Call,
		opts...,
	))
	return "/anyservice.Service/", mux
}

// UnimplementedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceHandler struct{}

func (UnimplementedServiceHandler) Call(context.Context, *connect_go.Request[anypb.Any]) (*connect_go.Response[anypb.Any], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("anyservice.Service.Call is not implemented"))
}
